/*
 *	1. 자바 실행 과정
 *	          2진파일 변경(0,1=>컴퓨터인식)
 *	          컴파일                      인터프리터
 *	   A.java ======> A.class(바이트 코드) ======> 실행
 *	           javac       배포(AWS)      java    한줄씩 번역
 *
 *	   **컴파일 / 인터프리터 (기술면접 75%)
 *
 *	2. 자바 변수/상수/리터럴
 *	   변수 : 데이터가 저장된 주기억장치 속 기억장소
 *	         데이터를 저장하는 메모리 공간(주소 - 0~크기만큼)
 *	         역할 - 읽기/쓰기, 저장하고 값 가져오기
 *	               쓰기 = 덮어쓰기 ==> 최종값 저장 
 *	               ex) int a=10; 
 *	                   a=20;
 *	                   a=30; ==> 얘가 a 메모리에 최종 저장
 *	   상수 : 데이터 저장하는 메모리 공간
 *	         변경할 수 없다
 *	         final
 *	   리터럴 : 실제 값
 *	          ex) int a=10; 에서 리터럴=10
 *	   ***변수 종료
 *	      - 지역변수 : 메소드 안에 선언된 변수
 *	                 메소드 안에서만 사용가능
 *	                 반드시 초기화를 한 다음 사용
 *	                 ex) 매개변수 - stack에 저장 => 메모리 자체 관리 => {}블록이 끝나면 자동으로 사라짐
 *	                 변수가 저장되는 시기 - 메소드 호출시마다 메모리 생성
 *	      - 멤버변수 : 클래스 영역 안에 선언된 변수
 *	                 new 사용시마다 따로 저장되는 변수
 *	                 new 사용시마다 메모리 생성,저장
 *	                 자바에서 가장 많이 사용되는 변수
 *	      - 공유변수 : 클래스 영역 안에 선언된 변수
 *	                 저장공간이 1개라서 모든 클래스 변수에서 공유해서 사용
 *	                 static 
 *	                 컴파일시에 저장 => 오라클
 *	      ***웹 => 다른 시스템이나 다른 클래스에서 사용 가능 => 멤버변수, 공유변수
 *	   ***식별자
 *	      클래스명,메소드명,변수명,인터페이스,열거형,어노테이션,추상클래스명,내부클래스명...
 *	      1.알파벳이나 한글로 시작 (대소문자 구분) - 가급적 영어사용, 한글은 운영체제에따라 깨질 수 있음(리눅스)
 *	      2.숫자 사용가능 (맨 앞 사용불가)
 *	      3.특수문자 _, $ 사용가능
 *	      4.키워드(예약어) 사용불가
 *	      5.공백 사용불가
 *	      *약속사항(자바 프로그래머)
 *	        1) 클래스,인터페이스,추상클래스,내부클래스 => 첫자 대문자
 *	           ex) class MainClass
 *	               interface MainInterface
 *	               abstract class MainClass
 *	               class Abc{
 *	                  class Bcd{
 *
 *	                  }
 *	               }
 *	        2) 변수, 메소드 => 소문자로 시작
 *	        3) 상수 => 모든 문자를 대문자로
 *	        4) 길이에는 제한X, 가급적 3~7자, 의미부여
 * 	           A.java(원시소스) ======> A.class(기계어)
 * 	           자바프로그래머만 인식 => 서로 알아볼 수 있게 의미부여
 * 	   변수선언
 * 	      데이터형
 * 	        기본형 - 자바에서 제공
 * 	               정수/실수/문자/논리
 * 	               byte-파일입출력,네트워크전송 / int-default / long-데이터분석
 * 	               double-소수점15자리까지
 * 	               char-String으로 대체
 * 	               boolean-true/false
 * 	        참조형 - 여러개 데이터를 모아서 저장 => 메모리 주소만 이용
 * 	               배열/클래스 => 사용자 정의
 * 	        지역변수 - 기본형
 * 	        멤버변수 - String + 기본형 => 배열(특별한 경우가 아니면 빈도수가 없음), 고정=>보완=>컬렉션  
 * -------------------------------------------------데이터 저장
 * 
 *  3. 데이터처리
 * 	   - 연산자
 * 	       단항연산자 ++, --, !, (type)-형변환연산자(논리연산자는 제외)
 * 	       이항연산자
 *           산술연산자 +, -, *, /, %
 *           	    + 문자열 결합시에도 사용
 *           비교연산자 ==, !=, <, >, <=, >=
 *           논리연산자 &&, ||
 *           대입연산자 =, +=, -=
 *         삼항연산자 (조건)?값:값 => 웹에서 많이 등장
 * 	   - 제어문
 * 	       조건문 if, if~else, if~else if~else
 * 	       반복문 for, while
 * 	       반복제어문 break
 * 	   - 메소드
 *  	   형식) 리턴형 메소드명(매개변수목록){ => 선언부
 *  	            구현부
 *  	            return 값;
 *  	                   ---리턴형에 해당되는 데이터형의 값 반환
 *  	                      리턴형이 void일 시 return 생략가능 => 컴파일러가 return 자동추가
 *  	            **void - 결과값이 없는 경우
 *  	                     ex) 메소드 자체 출력
 *  	                         오라클연결/파일연결=>추가,삭제,수정
 *  	        }
 *  	        ==> 데이터를 읽어온 경우에만 값이 존재
 *  	   리턴형 - 요청에 대한 결과값
 *  	          기본형 int, byte, long, double...
 *  	          배열 int[], String[]...
 *  	          클래스 Student, String, Music, Movie... ex)상세보기
 *  	   매개변수 - 사용자 요청값
 *  	            기본형 => Call By Value : 새로운 메모리 생성
 *  	            배열/클래스 => Call By Reference : 주소값을 받아 원본과 같은 메모리에서 매개변수 자체 처리(얕은복사-별칭부여)
 *  	   **결과값은 경우의 수에 따라 다름
 *  	     경우의 수 2개 => boolean
 *  	     경우의 수 여러개 => String, int
 *  	     ex) 로그인
 *  	         매개변수 - id, pwd
 *  	         리턴형 - 1아이디가 없는 경우 
 *  	                2비밀번호가 틀린 경우 
 *  	                3로그인되는 상태 
 *                      ===> int 1,2,3 or String
 *  
 */
public class 자바마지막정리 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
