// 122page
/*
 *	객체 생성
 *	형식) new 생성자() ==> 생성자명==클래스명과 동일
 *	ex) class A{}
 *	    A a=new A();
 *	     --- a==객체 => 멤버변수/멤버메소드를 관리
 *	    배열 int[] arr=new int[2];
 *	        ---arr---
 *	          0x100       arr[0] arr[1] => 메모리크기동일, 고정적, 같은 데이터형만 가능
 *	        --------- => ---------------
 *	                        0      0
 *                       ---------------
 *	    클래스 class A{
 *	            String name;
 *	            int age;
 *	         }
 *	         A a=new A();
 *	        ----a----
 *	           0x200 => 0x200에 있는 name이라는 변수값을 읽어온다 => a.name
 *	        --------- => -------------- 0x200
 *	                       ---name---
 *	                          null
 *	                       ----------
 *                         ----age---
 *                              0
 *                         ----------
 *	                     --------------
 *	        A a=new A();
 *	        a - 저장되어 있는 변수나 메소드를 관리 => 객체 => 설계(클래스)
 *	        new - 클래스에 있는 멤버변수를 저장할 수 있는 공간을 만들어준다
 *	              a라는 공간에 저장된 메모리 주소를 넘겨주는 역할
 *	        생성자 A() - 멤버변수의 초기값을 대입해주는 역할 => new와 같이 다닌다
 *	        **생성자 호출시에는 반드시 new 생성자()
 *	        1. 설계 => class
 *	        2. 메모리 저장 => new
 *	        3. 활용 => new로부터 받은 메모리를 이용해서 활용 => 객체
 *	        ---------------------------------------------객체지향프로그램
 *	        주목적 - 재사용, 수정-추가 편리
 *
 *	객체사용
 *	1. 생성
 *	   A a=new A();
 *	   ------------
 *	   A a;
 *	   a=new A();
 *	2. 사용시에는
 *	   a.변수
 *	   a.메소드
 *	   --------.은 메모리 주소 접근 연산자
 *  => 참조변수(객체) - 메모리 주소를 이용하는 방식
 *     ex) class A{
 *           String name;
 *           int age;
 *         }
 *         A a=new A();
 *         주소 = >스택      실제 데이터값 저장 => 힙
 *         ----a----    ---------0x100---------
 *         	 0x100          -----name-----
 *         ---------             null
 *                          --------------
 *                          -----age------
 *                                0
 *                          --------------
 *                      -----------------------
 *         A b=a; ==> 주소가 동일 => 같은 데이터 제어
 *         ----b----    ---------0x100---------
 *         	 0x100          -----name-----
 *         ---------             null      a.name==b.name
 *                          --------------
 *                          -----age------
 *                                0	       a.age==b.age
 *                          --------------
 *                      -----------------------
 *        **메모리 주소가 같은 경우에는 같은 메모리 제어 => 별칭
 *  => 일반변수 - 메모리에 저장된 값을 이용하는 방식
 *	   ex) int a=10;
 *	       int b=a;
 *	        ----a----      ----b----
 *	           10      =>     10
 *	        ---------      ---------
 *	       갑만 넘겨주는 상태 => a값 변경시 b값 변경 X / b값 변경시에 a값 변경 X
 */
class A{
	String name;
	int age;
}
public class 클래스_9 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		/*
		int a=10;
		int b=a; //일반변수 => 값만 넘겨줌
		
		b=100;
		System.out.println("a="+a);
		System.out.println("b="+b);
		*/
		
		A a=new A(); // a=>name/age
		System.out.println("a="+a); //A@1eb44e46
		//객체가 관리하는 메모리 주소 확인
		a.name="박문수";
		a.age=30;
		System.out.println("a.name="+a.name); //박문수
		System.out.println("a.age="+a.age); //30
		
		//메모리 주소를 받는 경우 => 메모리에 있는 변수 자체를 제어 => a의 별칭 => 동시에 같은 메모리 변수 사용
		A b=a;
		System.out.println("b="+b); //A@1eb44e46 a주소와 동일
		b.name="이순신";
		b.age=25;
		System.out.println("b.name="+b.name); //이순신
		System.out.println("b.age="+b.age); //25
		System.out.println("a.name="+a.name); //이순신
		System.out.println("a.age="+a.age); //25
		
		//배열/클래스는 메모리 주소 이용 => 대입하면 같은 메모리 제어 => 참조변수
	}

}
