package com.sist.main;
/*
 *  객체지향프로그램의 3대특성(권장사항, 문법X)
 *  1)데이터 보호 => 캡슐화
 *                데이터 은닉화 / 메소드를 통해서 접근
 *                private / getter, setter
 *  2)상속 => 기존의 클래스 재사용
 *           상속 - 변경해서 사용 => 메모리 누수현상 - 상위클래스 메모리 할당 후 하위 클래스 메모리 할당 => 메모리 사용량 증가
 *                              상위클래스에 맞게 사용 => 제약이 많다
 *                              결합성이 높아진다 => 수정시 다른 클래스에 영향을 미칠 수 있다
 *                              속도가 늦다 => 가급적 상속 사용하지 않는다
 *                 윈도우 프로그램 제작시 상속 사용
 *                 웹 프로그램, Spring - 상속 거의 없음 POJO
 *           포함 - 기존 클래스 있는 그대로 사용 => 사용빈도가 더 많다
 *  3)다형성 => 여러형태 - 같은 메소드명으로 다른 기능 수행
 *            새로운 기능 추가 - 오버로딩 new : 메소드명만 동일 (매개변수 개수 데이터형 다름, 리턴형 접근지정어 관계없음)
 *            기존의 기능 변경 - 오버라이딩 modify : 모든 내용 동일 (리턴형, 매개변수, 메소드명, 접근지정어)
 *  -----------------------재사용, 수정, 추가 => 유지보수
 *  
 *  클래스 구성요소
 *  - 클래스 == 설계
 *            필요한 데이터 추출 => 변수
 *            기능 추출 => 메소드
 *            필요시 초기화 => 생성자(생략가능)
 *            메모리에 저장 => 인스턴스 => new
 *            사용 => 객체 => new로부터 생성
 *                         사물을 단순화 시킴
 *                         관련된 데이터와 메소드를 관리하는 메모리 영역 (변수 => 데이터값 관리)
 *                         define은 중요하지 않다
 *                           ex) 하둡-개발자아들 노란코끼리장난감, 클라우드-구글사장이 네트워크 모양보고 명명
 *            class className{
 *               클래스 영역에서는 제어문, 연산처리, 값 다시 대입 불가
 *                            선언, 선언과 동시에 값대입만 가능
 *                            ex) int a;
 *                                int a=100;
 *               변수 - 인스턴스 변수** - 멤버변수
 *                                   Heap에 저장
 *                                   new 사용해서 메모리 영역을 만들어서 저장
 *                                   따로 저장하는 메모리 공간 생성
 *                                   클래스는 한개에 대한 정보 설계 ex) 학생 1명의 정보만 설계, 학생 여러명 new 여러개로 데이터 저장
 *                                   클래스명 객체명=new 생성자(); => 생성
 *                                   객체명.변수명 => 접근
 *                     static 변수 - 공통변수
 *                                  Method Area에 저장
 *                                  컴파일러에 의해 메모리가 1개만 생성
 *                                  접근시 클래스명.변수명
 *               메소드 - 변수 활용 => 사용자 행위
 *                      ex) 목록출력, 상세보기, 동영상, 결제...
 *               초기화 => 데이터베이스/파일/크롤링 => 생성자(생략가능, 생략시 자동추가), static {}
 *            }
 *            => new 연산자 => 메모리에 변수/메소드 동시에 저장 => 객체
 *            
 */
public class Chapter06_정리 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
