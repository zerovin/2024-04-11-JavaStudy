package com.sist.main;
/*
 *	클래스의 종류
 *  1.추상클래스 - public abstract class ClassName{} => 추상적인, 공통적인
 *              공통으로 사용되는 메소드 선언
 *              자신의 클래스 메모리할당 불가 => new 사용불가 => 미완성 클래스
 *              상속받아서 오버라이딩 후 사용
 *              요구사항(기능설정) => 선언만 가능
 *              기능은 같으나 구현하는 내용이 다를 때 사용 => 프로그램에 맞게 구현해서 사용
 *                ex)버튼 클릭(로그인,로그아웃,계산기..)
 *                   데이터베이스 연결(Oracle,MsSQL,MySql,Sqlite,MariaDB,DB2...)
 *                   => DriverManager라는 하나의 클래스로 통합 관리
 *              같은 기능의 클래스를 모아서 한개의 클래스 이름으로 관리할 때 주로 사용
 *                데이터 => 배열
 *                클래스 => 추상클래스, 인터페이스
 *                서로 다른 클래스를 연결할 때 주로 사용
 *                클래스마다의 공통 기능 추출 => 선언 후 필요시마다 상속받아 구현
 *              이미 기능이 선언되어 있음 => 요구사항(기능), 문제풀이
 *              무조건 상속을 받는다, 단일 상속 => 보완 => 다중상속으로 => 인터페이스
 *              멤버변수, 생성자를 가지고 있다 - 구현이 된 메소드 => 일반메소드
 *                                       구현이 안된 메소드 0개 이상 => 추상메소드
 *                ex)일반게시판 - 목록출력, 상세보기, 글쓰기, 수정, 삭제, 검색
 *                   답변형게시판 - 일반게시판 + 답변하기, 목록(답변추가), 삭제(답변 선삭체 후 게시물 삭제)
 *                   갤러리게시판 - 일반게시판 + 목록(이미지출력), 글쓰기(이미지업로드)
 *                   자료실 - 일반게시판 + 글쓰기(파일업로드), 상세보기(다운로드), 수정(파일수정), 삭제(파일삭제)
 *                   댓글형게시판 - 일반게시판 + 댓글기능, 목록(댓글개수), 상세(댓글추가)
 *              [접근지정어] abstract class ClassName{
 *                 멤버변수
 *                 생성자 (생략가능-생략시 디폴트생성자 자동추가)
 *                 메소드 => 구현이 된 메소드
 *                   [접근지정어] 리턴형 메소드(매개변수){
 *                   	return 값; => void일 경우 생략
 *                   }
 *                 추상메소드 => 구현이 안된 메소드
 *                   [접근지정어] abstract 리턴형 메소드(매개변수);
 *                   데이터베이스 - 오라클연동, MySql연동 => 같은 메소드 구현
 *                   ***웹 - 데이터베이스 연동 / J2EE => 웹 연결(브라우저) => 기본문법+라이브러리
 *              }
 *              유지보수가 어려운 경우 => 기능 설정 => 필요시마다 구현
 *              경우의 수가 많은 경우 - 기능은 같은데 구현이 다른 경우
 *  2.인터페이스
 *  3.내부클래스 - Thread, 네트워크와 관련
 *              클래스 안에 클래스 설정
 *              ex)멤버변수, 멤버메소드를 쉽게 사용
 *         
 *              class A{
 *                변수, 메소드
 *                class B{ => 멤버클래스
 *                   A가 가지고 있는 변수, 메소드를 A객체를 생성하지 않고 사용가능
 *                }
 *              }
 *              
 *              익명의 클래스 => 상속없이 오버라이딩 가능 => 윈도우 프로그램에 사용
 *              class A{
 *                B b=new B()
 *                  public void display(){}
 *              }
 *              class B{
 *                public void display(){}
 *              }
 *           ***상속이 있어야만 오버라이딩 가능 X => 익명의 클래스로도 오버라이딩 가능
 *              Spring에서는 상속을 권장하지 않는다 - 제약 존재(상위클래스에 맞게)
 *                                            메모리가 커짐(상,하위클래스 둘 다 메모리할당)
 *                                            처리속도가 늦다
 *                                            재사용 => 상위클래스 소스를 모르는 상태에서 재정의 => 가독성저하   
 *  4.종단클래스 - 사용빈도 거의 없음, 라이브러리에 존재, 확장불가(고정)
 *              public final class String => 상속, 오버라이딩 불가
 *              ex)java.lang => String, System, Math, Wrapper... 상속불가
 *              
 */
import java.util.*;
abstract class 도형{
	//그리다 => 선, 원, 사각, 삼각...
	public abstract void draw(); //미완성된 클래스 => 메소드 구현X => 메모리에 저장불가
	//상속을 받아서 구현 후 사용
	//여러개의 관련된 클래스를 모아서 관리
}
class 선 extends 도형{
	//추상클래스나 인터페이스 상속이 있는 경우 => 반드시 구현이 안된 메소드를 구현해서 사용
	
	//오버라이딩으로 구현
	/*
	 *	오버라이딩 = 재정의 => 덮어쓰기
	 *  1.메소드명이 동일
	 *  2.매개변수가 동일
	 *  3.리턴형 동일
	 *  4.접근지정어 확장가능
	 *    private - 데이터 보호 목적 => 변수
	 *    public - 다른 클래스와 연결 => 클래스, 메소드, 생성자
	 *    **접근 범위를 늘리는 경우
	 *      private < default < protected < public
	 *  5.추상클래스는 반드시 상속을 내려서 선언된 메소드 구현 후 사용 => 자신이 메모리 할당 불가능
	 *  
	 */
	@Override
	public void draw() {
		// TODO Auto-generated method stub
		System.out.println("선을 그린다 ------");
	}
}
class 사각형 extends 도형{

	@Override
	public void draw() {
		// TODO Auto-generated method stub
		System.out.println("사각형을 그린다 □■□■□■");
	}
	
}
public class 추상클래스_1 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Calendar cal=Calendar.getInstance(); //abstract class
		/*
		선 a=new 선();
		a.draw(); //선을 그린다 ------
		사각형 b=new 사각형();
		b.draw(); //사각형을 그린다 □■□■□■
		*/
		
		//보통 하나의 객체(하나의 메모리)만 가지고 구현
		//같은 종류의 클래스를 모아서 한개의 객체명으로 연결, 사용
		//기능설정 후 프로그램에 맞게 구현
		도형 a=new 선();
		a.draw(); //선을 그린다 ------
		a=new 사각형();
		a.draw(); //사각형을 그린다 □■□■□■
		
	}

}
