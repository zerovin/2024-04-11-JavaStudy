/*
 *	114page
 * 	객체 => 변수 (여러개의 변수/여러개의 메소드) 동시에 관리하는 영역
 *  ---설계의 영역 => class
 *	   동시에 관리하기 위해서는 저장 => new
 *
 *	115page
 *	명사적 => 변수
 *	ex) 같은 학교 학생 - 학번, 이름, 학교명, 성별, 주소, 전화 ... => 변수
 *	                 학교명 - 같은 값을 공통으로 가지고 있는 변수 => static 변수
 *	                 나머지 - 학생마다 값을 따로 가지고 있는 변수 => new이용한 인스턴스 변수
 *	동사적 => 메소드
 *	ex) 메소드 - 점심을 먹는다, 시험을 본다, 게임을 한다 ...(동작)
 *
 *	변수 / 변수를 활용한 메소드 => 클래스 => 관리 (객체)
 *	ex) 시계 - 시침 / 분침/ 초침
 *	    계산기 - 첫번째 정수 / 두번째 정수 / 연산자 
 *
 *	객체란?*** 기술면접 100%
 *	현실세계/비현실세계를 특성화(추상화,단순화) 시킨 것
 *
 *	벤치마킹 - 사이트 결정
 *	=> 분석 - 명사적 : 출력물, 동사적 : 클릭/메뉴선택..
 *	=> 클래스 설계 - 필요한 데이터 : 변수 - 공통으로 사용되는 변수, 따로 사용되는 변수
 *	              사용자 행위 : 메소드
 *
 * 	클래스명 - 변수 식별자와 동일
 *          알파벳이나 한글로 시작 (알파벳 대소문자 구분)
 *          특수문자 _, $ (_를 많이 사용 => 단어가 2개이상인 경우, 임시클래스) ex) Main_Class, File_Name, _Temp
 *          숫자 사용가능 (맨 앞은 불가)
 *          공백 사용불가
 *          키워드(예약어) 사용불가       
 *          **약속사항
 *             한글은 가급적 사용X (운영체제에 따라 깨질 수 있음 ex)리눅스) => 알파벳 사용
 *             알파벳 시작첫문자는 대문자로
 *	클래스 - 같은 폴더에서는 같은 이름의 클래스명 사용 불가
 *         한개의 파일(.java)에 여러개의 클래스를 만들 수 있다
 *       - 형태 - 데이터형 클래스 => 변수만 설정 - 사용자 정의 데이터형
 *               ~VO(Spring), ~DTO(MyBatis), ~Bean(JSP)
 *             - 액션 클래스 => 메소드 설정 - 기능만 처리
 *               ~DAO, ~Manager, ~Controller(요청=>응답)
 *  117~118page       
 *	class ClassName{
 *	   ***멤버변수
 *	      new => 저장 => 따로 메모리 생성 => 인스턴스 변수
 *	      컴파일시 저장 => 한개의 메모리 생성 => 정적 변수 => static
 *	   ***초기화
 *	      인스턴스 변수 초기화 - {}, 생성자
 *	      static 변수 초기화 - static{}, 생성자 => 자동저장이 가능하기 때문에 생성자 이용X
 *	   ***변수활용 => 메소드
 *	}
 *             
 */
public class 클래스_2 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
