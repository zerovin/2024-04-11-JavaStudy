/*
 *	클래스 구성요소
 *	class ClassName{
 *		-----------------------------------------
 *		  변수 =============> 클래스 전체(전역변수)
 *		  - 멤버변수
 *		  - 공유변수
 *		  - 메소드 안에 선언되는 변수 => 매개변수, 지역변수
 *		  - 객체지향프로그램 핵심 => 캡슐화(데이터 보호)
 *		-----------------------------------------
 *		  생성자 : 변수의 초기화, 클래스 저장시에 호출
 *		         필요시에만 사용
 *		-----------------------------------------
 *		  메소드 : 기능 수행 => 수정(오버라이딩) => 가독성 => 유지보수
 *		         ex) 게시판-글쓰기,상세보기,조회수증가,수정,추가,삭제,검색
 *		-----------------------------------------
 *	} 
 *
 *	기존의 프로그램을 기능별로 나눠서 작업(분업화)
 *	                            -----메소드
 *	메소드는 반드시 한개의 기능만 수행 => 재사용하기 편리
 *	ex) 게시판+댓글(X) => 게시판/댓글(O)
 *
 *	모든 프로그램 세분화
 *	1.입력
 *	2.처리
 *	3.출력
 *
 * 	메소드
 * 	- 선언부 => 추상메소드
 *      접근지정어 - 전체 프로그램에서 샤용 => public
 *                상속받은 클래스까지 사용 => protected
 *                같은 폴더까지 접근 => default(접근지정어가 아무것도 안 붙으면 default)
 *                클래서 안까지만 접근 => private
 *      옵션 - 공유하는 메소드 => static : 자동으로 메모리에 저장
 *            선언하는 메소드 => abstract
 *            수정할 수 없는 메소드 => final
 *      리턴형 - 사용자 요청에 따른 처리 후 결과값
 *           - 결과값이 1개일 때 사용
 *             기본형 => byte,char,int,long,double,String =>
 *           - 결과값이 여러개일 때 사용
 *             배열 ex) sort하려면 배열로 넘겨야 함
 *             믈래스 ex) 일반 웹, 상세보기
 *           - 결과값없이 메소드 자체처리 => 결과값이 없다 => void
 *      메소드명 - 변수 식별자와 동일
 *               **약속사향 - 소문자로 시작
 *      매개변수 - 사용자가 보내준 값(요청값)
 *             - 여러개 사용가능(기본형-하나, 배열-3개이상, 클래스-3개이상)
 *      [접근지정어][옵션] 리턴형 메소드명(매개변수...)
 * 	- 구현부 => 일반메소드
 *	    {
 *	    	구현부 => 반드시 결과값을 보내준다
 *	    	return 값;
 *	    }
 *	- 메소드 사용 목적
 *	  - main에 소스 코딩 => 한번쓰고 버린다 (절차적 언어) => X
 *    1.재사용(수정 편리)**
 *      사이트기능-게시판,공지사항,회원가입,예약,결제,장바구니...JSP=>1차 2차는 1차 재사용+보안
 *    2.가독성 - 유지보수
 *    3.중복코드 제거 - 소스량 줄이기
 * 
 *  자바 => 오라클 => HTML/CSS => JavaScript
 *  JSP => Spring => 파이썬 => AWS                 2000년대
 *  -----------------------------------------------------
 *  MyBatis / JPA / Ajax / VueJS / React / Redux / Next
 *  Sprng-Boot / MSA
 *  
 *  - 메소드 원형
 *	  리턴형 메소드명(매개변수) => 라이브러리 => 기능
 *	- 메소드 유형
 *	  -----------------------------------------------------
 *	    리턴형   매개변수
 *	  -----------------------------------------------------
 *	      O      O    => ex) String
 *	                         String substring(int start)
 *	  -----------------------------------------------------
 *	      O      X    => ex) String trim() => 공백만 제거
 *	                         double random() => 임의의 수 추출
 *	  -----------------------------------------------------
 *	      X      O    => ex) void print("")
 *	  -----------------------------------------------------
 *	      X      X    => 빈도수가 거의 없다 
 *	                     ex) System.out.println() => 줄바꿈
 *	  -----------------------------------------------------
 *	  ** 리턴형이 없는 경우에는 메소드 자체 처리 void
 *	     - 출력할 경우
 *	     - 브라우저나 핸드폰에 전송 => 리턴형
 *	     - 리턴형 오라클 자체처리 (Insert, Update, Delete)
 *
 */

// 2~9단까지 구구단 출력
public class 메소드_1 {
	static void gugudan() {
		for(int i=1;i<=9;i++) { // 줄수
			for(int j=2;j<=9;j++) { // 구구단 출력수
				System.out.printf("%d*%d=%2d\t",j,i,j*i);
			}
			System.out.println();
		}
	}
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		gugudan();
		//호출 == 메소드명(값);
		/*
		 * void aaa()
		 * => aaa();
		 * 
		 * int bbb(int a)
		 * => int a=bbb(10);
		 * 
		 * void ccc(char c)
		 * => ccc('A');
		 * 
		 * double rand(int num)
		 * => double d=rand(3);
		 * 
		 * String getName()
		 * => String name=getName();
		 * 
		 * String setName(String name)
		 * => String setName("홍길동");
		 * 
		 * **리턴값이 있을 경우 리턴형과 같은 데이터형의 변수에 담아서 호출
		 * **메소드는 호출시 무조건! 메소드의 시작부터 끝까지 수행
		 *   수행이 종료되면 호출된 위치로 복귀
		 */
		
	}

}
