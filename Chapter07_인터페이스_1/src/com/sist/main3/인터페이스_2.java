package com.sist.main3;
/*
 *  1.클래스 구성요소
 *    변수 => 기본형, 클래스, 배열
 *    메소드 => 연산자, 제어문
 *  2.클래스 연결 => 인터페이스
 *  3.프로그램 종료방지 => 예외처리 - 사용자가 입력값을 잘못 넘겨준 경우 처리
 *  => 못 만드는 클래스 존재
 *     오라클 연결 / 브라우저 연결 / 파일 연결 => 라이브러리
 *       ex) System.out.println() => API Application Program Interface => C언어로 제작됨
 *     라이브러리들 조립 => 객체지향프로그램
 *     class는 1개의 기능만 수행 => 메소드 여러개 - 여러개 기능 => 컴포넌트
 *  
 *  7장
 *  클래스의 종류
 *    일반클래스
 *      일반 기능 클래스 - 변수설정, 활용-메소드, 초기화-생성자(필요없는 경우 생략)
 *                     변수, 메소드 => 상속되는 애들
 *                     [접근지정어] [제어어] class ClassName{
 *                        접근지정어 - 다른 클래스에서 사용해야 하니 보통 public
 *                        제어어 - 공통 static
 *                               추상클래스 abstract
 *                               상속확장불가 final
 *                        변수 - 데이터 => 모든 프로그램은 데이터 관리
 *                              메모리 여러개로 저장 => 인스턴스 => new 이용해서 따로 저장
 *                              메모리 한개로 저장 => 정적변수 static
 *                        생성자 - 없는 경우 컴파일러가 매개변수 없는 디폴트 생성자 자동추가
 *                        메소드 - 리턴형 - 요청 처리 결과값, 하나만 가능, 여러개일 경우 배열/클래스
 *                               매개변수 - 사용자 요청값, 여러개 사용가능
 *                     }
 *      조립 클래스 - main()
 *    추상클래스
 *      재사용
 *      설계 => 공통으로 사용되는 내용 설계 => 개발기간 단축
 *        ex) 설계 (요구사항분석) - 3개월
 *            데이터베이스 설계 - 1개월
 *            화면UI - 1개월
 *            개발 구현 - 15일 => 재사용(상속-변경할 내용이 있을 시 , 포함-변경할 내용이 없을 시)
 *                             .jar => 라이브러리 생성
 *            테스트 - 15일
 *            배포 - 1개월
 *      메모리 할당이 불가능 => 상속 내려서 사용
 *      관련된 클래스를 묶어서 관리
 *      추상클래스 구성요소 / 형식
 *        [접근지정어] abstract class ClassName{
 *           변수 - 멤버변수
 *           생성자
 *           메소드 - 구현된 메소드
 *                  선언만 된 메소드 => 추상메소드 - 상속받은 메소드마다 기능은 동일, 구현 내용이 다름
 *                    [접근지정어] abstract 리턴형 메소드명(매개변수);
 *        }
 *    인터페이스
 *      추상클래스 보완 => 추상클래스의 일종
 *      설계 => 개발기간 단축
 *      표준화 => 모든 개발자가 같은 메소드 사용
 *      독립적으로 사용이 가능
 *      클래스를 묶어서 관리
 *      결합성이 낮은 프로그램 => 에러시 다른 클래스에 영향이 없다
 *      ex) 윈도우 - 이벤트 처리(버튼 클릭, 마우스 클릭, 키보드 입력...)
 *          컬렉션 - 데이터를 모아서 쉽게 관리 => 자료구조
 *          데이터베이스 - 연결, 닫기, SQL문장...
 *          웹 프로그램 - 요청 받기, 요청 처리, 결과값 전송
 *      사용확인법 - new를 사용하지 않고 객체 생성하면 인터페이스
 *                추상 클래스와 인터페이스는 객체 생성 불가능 => new 사용 X
 *      형식 / 구성요소 
 *        [접근지정어] interface 인터페이스명{
 *           접근지정어 - 다른 클래스와 연결 public
 *           변수가 없기 때문에 생성자가 없다.
 *           상수 => 변수X
 *                  (public static final) 데이터형 상수명=값;
 *                  --------------------없는 경우 자동추가(생략가능)
 *                  상수이기 때문에 반드시 값 명시
 *           구현이 안된 메소드 - (public abstract) 리턴형 메소드명(매개변수...);
 *                           -----------------없는 경우 자동추가(생략가능)
 *           구현된 메소드 - (public) default 리턴형 메소드명(매개변수){
 *                        -------없는 경우 자동추가(생략가능)
 *                            default 반드시 서술
 *                            구현
 *                        }
 *                       (pubilc) static 리턴형 메소드(매개변수){}
 *                       => default/static 구현가능 => jdk 1.8이상에서만 가능
 *                          유지보수 => 전에 개발 된 경우에는 사용 할 수 없다
 *                          권장사항 => 메소드 선언만
 *        }
 *      인터페이스도 상위클래스 개념
 *        1) 인터페이스 == extends ==> 인터페이스
 *           다중상속 가능
 *           interface A
 *           interface B
 *           interface C extends A, B
 *        2) 인터페이스 == implements ==> 클래스
 *           다중상속 가능
 *           interface A
 *           interface B
 *           class C implements A, B
 *        3) 클래스 == extends ==> 클래스
 *           단일상속만 가능
 *           class A
 *           class B extends A
 *        4) 혼합
 *           interface A
 *           interface B
 *           class C
 *           class D (클래스 상속) (인터페이스 상속)
 *           class D extend C implements A, B => 윈도우 만들 때 많이 사용
 *        ***특별한 경우가 아닌 경우 => 웹은 주로 클래스를 묶어서 사용 => 서로 다른 클래스를 연결해서 사용
 *      
 *    내부클래스 => 네트워크 통신, 게임
 *               네트워크 - 접속을 받는 클래스, / 클라이언트 통신
 *                       IP, PORT => 클래스와 클래스 간에 공통으로 사용되는 변수, 메소드가 있는 경우
 *    
 *  
 */
public class 인터페이스_2 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
