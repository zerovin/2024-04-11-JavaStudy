package com.sist.main;
/*
 *	변수/메소드/생성자
 *  접근 범위
 *  - private - 멤버변수 데이터를 보호하는 목적 => 접근거부
 *  - public - 다른 클래스 연결 ex)메소드, 클래스, 생성자 => public => 접근승낙
 *  
 *  라이브러리에서 제공
 *  접근지정어는 멤버에서만 사용가능
 *           ---클래스영역에 선언된 인스턴스변수, 정적변수, 메소드, 생성자, 클래스 => 다른 클래스에서 사용
 *              지역변수는 접근지정어, static 사용불가 => 다른 클래스 연결과 상관없이 해당 메소드 안에서만 사용
 *                                                final만 사용가능
 *  private*** - 자신의 클래스에서만 사용가능, 접근금지 ex)개인정보, 회사정보
 *             **모든 멤버변수는 데이터보호 => private (권장)
 *  default - 같은 패키지에서만 접근가능, 키워드가 없는 상태
 *            class A{
 *               int a; => default
 *            }
 *  protected - 같은 패키지에서만 접근가능 + 상속을 받은 경우 다른 패키지까지 접근가능
 *  public*** - 모든 클래스에서 접근가능, ex)클래스, 메소드, 인터페이스, 상수, 생성자
 *  ===> priavte** < default < protected < public**
 *  
 *  지역변수 - final 외의 다른 키워드는 사용불가
 *           멤버변수는 기본 초기화 => 바로 사용가능, 생성자/초기화블록 필수X, 생성자 생략시는 자동추가
 *                               프로그램에 필요한 경우 초기화 후 사용
 *           지역변수는 반드시 초기화 후 사용
 *           
 *	메소드 - 기능수행
 *         반복제거
 *         재사용
 *         구조적인 프로그램(단락) => 수정, 추가
 *  - 형식) [접근지정어] [옵션] 리턴형 메소드명(매개변수목록){
 *            사용자 요청에 대한 처리
 *            결과값 전송 => return
 *         }
 *         접근지정어 - 메소드=통신담당(소프트웨어=>메세지) => 클래스-클래스 연결 => public 모든 클래스에서 사용가능
 *         옵션 - static(클래스 전체에 공통적용, 동일한 기능)-ex)한글변환/암호화/복호화, abstract, X
 *         리턴형 - 기본형(데이터값이 하나인 경우), 배열(전송 데이터가 여러개일 경우), 클래스(정보출력, 변수가 여러개일 경우)
 *         메소드명 - 식별자, 소문자시작(가급젹 한글 사용X => 운영체제에 따라 한글인식이 다름)
 *         매개변수 - 여러개 사용 가능, 가급적 3개이하로, 3개 초과시 배열, 클래스
 *                  사용자가 보내는 요청값의 개수를 모를 경우('...' 가변형)
 *       **리턴형 - 요청에 대한 결과값
 *         매개변수 - 사용자가 요청한 값 ex)로그인요청 id/pwd, 검색 검색어
 *  - 호출 - 메소드는 호출하면 처음부터 끝까지 수행 { => 시작 / } = >끝
 *          class A{
 *             int a=10; 
 *             static b=20; => 저장
 *             public void aaa(){}
 *             public int bbb(){}
 *             public static void ccc(){} => 저장
 *             public static int ddd(){} => 저장
 *          }
 *          A aa=new A(); => 인스턴스들 a, aaa(), bbb() 저장
 *          인스턴스 호출 aa.a, aa.aaa(), aa.bbb() => 객체명.변수명 객체명.메소드명() 호출
 *                    객체명에 메모리주소
 *          static 호출 A.b, A.ccc(), A.ddd() => 클래스명.변수명 클래스명.메소드명() 호출
 *                    클래스명이 구분자
 * 
 */
public class 클래스_접근지정어 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
