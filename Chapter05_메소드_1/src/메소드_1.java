/*
 *	※클래스의 구성 요소
 *	  class ClassName{
 *	     -------------------------
 *	      변수 : 데이터 저장
 *	            캡슐화 (데이터 보호)
 *	     -------------------------
 *	      생성자 : 변수에 대한 초기화
 *	     -------------------------
 *	      메소드 : 데이터를 활용하는 기능
 *	     -------------------------
 *	  } 
 *
 *	1. 기능설정 => 단락 => 처리 => 메소드
 *	   자바 - 메소드 => 클래스 종속
 *	   C/C++ - 함수 => 독립적으로 사용
 *	2. 데이터 저장 ================> 데이터 처리(요청) = 데이터 가공 =================> 요청 결과를 전송
 *	   - 변수(한개)                      1) 연산자
 *	   - 배열(여러개)                     2) 제어문
 *	     같은 데이터형             연산자 + 제어문 = 메소드(명령문의 집합)
 *	     인덱스 이용                    한가지 기능만 수행
 *	   - 클래스(사용자 정의 데이터형)     반복적인 내용 제거 - 기능별
 *	     다른 데이터형             ex) System.out.println() 
 *	                                => println() == 출력담당메소드
 *	                           구조적 프로그램 (단락) => 수정,추가,삭제가 편리
 *	                             재사용 => 다른 클래스에서 사용가능
 *
 *	※메소드(Method)
 *	  - 사용목적 - 가독성(기능별로 묶는다) => 에러시 처리가 편리
 *	          	 기능별 구분
 *	             재사용성 => 객체지향 프로그램
 *	             속도 => 최적화
 *	  - 기능별 처리 ex) 로그인처리, 회원가입, 게시판, 목록(페이징), 예약하기, 결제
 *	  - 다른 클래스에서 연결 - 메세지(메세지의 기본 = 메소드) => 상호 통신
 *	  - 필요시마다 재사용
 *	    ex) Scanner scan=new Scanner(System.in); 입력값-클래스
 *	        => nextInt() 클래스 기능 호출
 *	  - 반복 제거 - 메소드가 호출되면 처음부터 실행
 *	  
 *	  변수(데이터) => 기능(메소드) => 조립(웹사이트)
 *	  ex) 메인 - menu / footer / contents-게시판,채딩,공지,예약,결제,장바구니 => 기능 하나하나가 메소드
 *	  
 *	  오버라이딩/오버로딩 => 인터페이스/추상클래스/오라클연동
 *	  1.메소드의 형식 []=>생략
 *	    [접근지정어][옵션] 리턴형(결과값) 메소드명(매개변수){ => 선언문
 *	         //구현
 *	    }
 *	    리턴형(결과값) - 모든 메소드는 리턴형을 가지고 있다
 *	                 사용자 요청에 대한 처리 결과를 넘겨준다
 *	                 리턴형은 1개만 사용 => 데이터가 많은 경우에는 묶어서 넘겨준다(배열/클래스)
 *	                 ex) 사용자 요청
 *	                     정수 두개를 전송 => 더한 결과값 => 정수+정수(리턴형)
 *	    매개변수(사용자 요청값) ex) 로그인요청 - 사용자 요청값(id,pwd)-결과값(boolean(true/false))
 *	                          검색요청 - 사용자 요청값(검색어)-결과값(검색결과 출력=>목록=>배열[])
 *	    메소드명(식별자) - 알파벳, 한글로 시작 (대소문자 구분)
 *	                  숫자 사용 가능(맨 앞 사용금지)
 *	                  키워드 사용금지
 *	                  특수문자 가능($, _)
 *	                  공백 불가
 *	                  **변수는 중복 사용 불가능 (한개의 메소드에서 같은 변수명 사용불가)
 *	                  **메소드는 같은 이름 사용 가능
 *	                  **약속사항(자바개발자) - 소문자로 시작
 *	                                     단어가 2개이상일 때 camelCase(헝가리식 표기법) or _ 언더바 사용 ex)fileName()
 *	                  **결과값(리턴형)/요청값(매개변수)를 받아 처리
 *	    메소드 유형 - ----------------------------------------------------
 *	                    리턴형                    매개변수
 *	               ----------------------------------------------------
 *	                     O                        O
 *	                   String       substring(int start, int end)
 *	               ----------------------------------------------------
 *	                     O                        X
 *	                   double       random() => 결과값 0.0~0.99 실수리턴
 *	               ----------------------------------------------------
 *	                     X                        O
 *	                    void      pringln("aaa") => 결과값이 없는 경우 void 
 *	               ----------------------------------------------------
 *	                     X                        X
 *	                    void           println() => 다음줄에 출력
 *	               ----------------------------------------------------
 *	               ** 웹 개발 => 사이트 => 사용자 입력==매개변수 => 처리 => 화면==결과값(리턴형)
 *	                  사용자 행위 - 입력(마우스클릭...) => 입력을 받는게 매개변수 => 화면출력(리턴형)
 *	                  사용자 요청 => 처리 => 결과값을 돌려줌 ====> 메소드	      
 *	  2.메소드 사용법 - 메소드 호출방법
 *	    1) 결과값이 없는 경우
 *	       메소드명(매개변수)
 *	    2) 결과값이 있는 경우
 *	       데이터형 변수명=메소드명(매개변수)
 *	       ex) double d=Math.random() => 데이터형 일치 => 형변환/큰 데이터형으로 받기
 *	  3.반복 제거
 *	    ex) 오라클연결 => 문장전송(SELECT) => 오라클닫기
 *	        오라클연결 => 문장전송(UPDATE) => 오라클닫기
 *	        오라클연결 => 문장전송(DELETE) => 오라클닫기
 *	        ===> 오라클연결, 오라클닫기 => 반복구간 => 메소드화
 *	  4.형식
 *	    [접근지정어][옵션] 리턴형(!) 메소드명([매개변수]...){
 *	        기능 구현
 *	        결과값 전송
 *	        return 값; => 값이 1개만 사용 가능(javja/c/c++)
 *	                     python은 여러개 사용 가능
 *	                     데이터가 많은 경우 => [], 클래스를 이용해서 모아서 보내줌
 *	    {
 *	    접근지정어 - public, private, protected, default(같은 폴더안에서만 호출)
 *	    옵션 - 선언만 하는 메소드 abstract
 *	          공유(static) => 메모리에 자동으로 올라간다
 *	    **모든 메소드는 메소드 종료를 나타내는 표시 필요 == return
 *	      단, void일 경우(결과값이 없는 경우 return 생략가능) => JVM에서 컴파일러가 자동으로 return추가
 *	
 *	**클래스 - 사용자 데이터형 => 데이터만 저장할 목적 ex) ~VO(ValueObject), ~DTO, ~Bean
 *	         액션 클래스 => 메소드(기능만 가지고 있음) => ~DAO(데이터연결), ~Manager
 *	                 실무에서는 얘가 중심. 실습 => 관리자페이지, 댓글형 게시판, 예약, 결제 페이지 제작 제출
 * 
 */

public class 메소드_1 {
	// 자동 메모리 할당(static) => 메소드도 메모리에 저장해서 사용
	// 자체처리 => 출력을 메소드 안에서 처리(void)
	static void display(String name) { // String name == 매개변수 => 사용자가 보내준 값
		System.out.println("display : 진입");
		System.out.println("사용자가 보내준 값 : "+name);
		System.out.println("display : 처리완료");
		System.out.println("display : 종료");
	}
	public static void main(String[] args) {
//  접근지정어  공유  결과값X 메소드명   매개변수	
		// main == 시작점
		// TODO Auto-generated method stub
		System.out.println("Hello Method"); //void java.io.PrintStream.println(String x) => 자체처리
		Math.random(); //double java.lang.Math.random()
		String s="";
		s.substring(0); //String java.lang.String.substring(int beginIndex)
		                //------리턴형                        ---------------매개변수
		//원형 => 라이브러리 => 메소드(리턴형/매개변수)
		
		//메소드호출
		System.out.println("display 진입 전");
		display("홍길동"); //메소드 호출 => 메소드명(매개변수); 리턴형, 매개변수 확인
		System.out.println("===============");
		
		System.out.println("display 진입 전");
		display("심청이");
		System.out.println("===============");
		
		System.out.println("display 진입 전");
		display("이순신");
		System.out.println("===============");
		}

}
