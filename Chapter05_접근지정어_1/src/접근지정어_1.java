/*
 * 	자바 CBD- 이미 필요한 기능은 존재, 조립해서 만드는 프로그램
 * 
 *	객체 지향 프로그램 기본문법 (~8장) => 데이터 관리
 *	1.클래스
 *	  - 변수 설정 - 어떤 데이터가 필요한지 => 캡슐화 : 데이터 보호 => getter/setter
 *                기본형(정수,실수,논리,문자), 배열, 클래스(포함 클래스 ex)String=>데이터형)
 *                1)요구사항 - 데이터선언 => 데이터수집 => 데이터분석 => 데이터분리 => 데이터예측
 *                           ===> 머신러닝/딥러닝 => 예측 => 프로그램 제작 ===> AI
 *                2)기능설정 - 목록/상세/예약/결제... ===> 메소드
 *                ------변수 + 메소드 => 한개의 기능 => 설계(클래스) => 활용 => 객체 ==> 객체에 의한 관리(객체지향프로그램)
 *                             └ 사용자 요구에 따라 기능 수정, 변경 = 오버라이딩 
 *	  - 변수의 초기값 - 생성자 => 서버 / 데이터베이스 미리 연결
 *	  - 변수 활용 - 메소드 => 기능(수정,추가) => 다형성(오버로딩/오버라이딩)
 *	2.접근지정어 - public / private / protected / default => 접근 범위 지정 127page
 *	3.상속 / 포함 - 재사용 기법
 *	  - 상속 : 변경해서 사용 ex) 윈도우프로그램, 네트워크, 쓰레드
 *	  - 포함 : 있는 그대로 사용 POJO ex) Spring
 *	-----------------------------------------객체지향의 3대 특성(캡슐화, 상속, 다형성) => 면접(99.9%)
 *	4.클래스 종류
 *	  - 일반 클래스***
 *	  - 추상 클래스
 *	  - 인터페이스***
 *	  - 내부 클래스
 *	    - 멤버 클래스***
 *	    - 익명의 클래스***
 *	    - 지역 클래스
 *	  - 종단 클래스
 *	5.조립법
 *	  - 패키지 : 관련 클래스끼리 모아서 관리 ex) import
 *	           java, javax 폴더
 *	6.예외처리 - 프로그램의 비정상 종료 방지
 *	           사전에러 방지 try~catch ex) 파일-경로명,파일명 / 네트워크-URL,Server IP 오류 (Jsoup)
 *	-----------------------------------------기본 이론(면접) => 구현(실무)
 *	7.라이브러리-자바, 외부지원-mvnrepository.com(Jsoup, lombok...)
 *	    => J2SE 일반자바 standard edition
 *	  J2EE - 웹 개발
 *	    => JSP / Srvlet(기업용 환경) ex) maven, spring-boot
 *	========================================================================
 *	
 *	1.클래스 구조(설계)
 *	  class ClassName{
 *	     데이터 선언
 *	     - 멤버변수
 *	         인스턴스변수 : new 사용시마다 메모리가 따로 생성 => 여러개 저장
 *	         정적변수 : static, 메모리 공간을 1개만 사용
 *	         변수 - 메모리에 저장 / 메모리 읽기 => 메소드화 저장-setter 읽기-getter
 *	         *** static을 제외한 모든 변수는 은닉화(데이터보호) => 캡슐화(필요시 사용가능)
 *	             => 시큐어 코딩 - 안하면 벌금 3000
 *	         다른 클래스와 연결해서 사용 가능하게 만든다
 *	         객체--객체 => 상호 연결해서 사용 요청-응답 ex) 사람-자판기, 사람-컴퓨터, 사용자-게임, 사용자-웹  
 *	         유스케이스 다이어그램 - 행위자(Actor)에 따라 기능설정
 *	     데이터 초기화 - 클래스 영역 안에서는 선언만 가능 => 구현(파일읽기, 화면UI, 웹연결, 연산처리, 제어문 사용불가)
 *	     - 생성자 - 리턴형이 없다
 *	              클래스명과 동일
 *	              여러개 사용가능 => 오버로딩
 *	              객체 생성시 반드시 호출
 *	              시작과 동시에 처리해야되는 기능이 있는 경우 ex) 화면UI
 *	              모든 클래스에서 반드시 한개이상 포함, 생략시 컴파일러가 자동생성=default생성자:(매개변수가 없는 생성자)
 *	              ex) class A{
 *	                     A(){} => default생성자 => 생성자 없는 경우 자동 추가
 *	                     A(int a){}
 *	                     A(int a, int b){}
 *	                  }
 *	     - 초기화 블록 - { 구현 ex)자동로그인, cookie, session등록, 데이터베이스 연동 }
 *	                  인스턴스변수 => 자동으로 초기화 처리(호출X) 
 *	     - 정적 블록 static - static{ static 변수 초기화 }
 *	     메소드 - 요청처리 => 응답 => 웹(메뉴) => 버튼, 마우스 클릭...
 *	  }
 *	  ========== 설계 => 메모리에 저장
 *	2.객체 생성
 *	  클래스명 변수명(객체) = new 클래스명();
 *	    변수명(객체) == 변수, 메소드 => 동시에 관리 => 객체
 *	    new == 클래스 크기만큼 메모리 확보 => 저장공간 생성
 *	    클래스명() == 저장공간을 만들어 주면 초기화를 대입하는 역할
 *	3.객체 활용
 *	  객체명.변수명, 객체명.메소드명() 
 *	    . == 연결된 주소에 접속하는 연산자
 *	4.객체 소멸 disconnection
 *	  객체명=null; => 연결되는 주소를 지움 => 사용X => 가비지컬렉션 대상-주소가 null인 경우, 사용하지 않는 경우 메모리 자동회수
 *	
 *	==> ex) 컴퓨터 장만 == new
 *	        컴퓨터 연결 == 생성자 => 사용가능한 상태로 만듦, 초기세팅
 *	        데이터 저장할 메모리생성 -> 초기값 설정 => 사용가능한 상태
 *	        ====> new 클래스명()
 *	              └ 안의 여러개의 데이터, 여러개의 메소드에 접근 '.'
 *	
 *	자바 프로그램의 순서
 *	 관련된 클래스를 모아준다 - 패키지 ex) client,server/user,admin
 *	                          ex) java.io, javax.swing, java.util
 *	                          package 경로명; - 한번만 사용가능
 *	 필요한 클래스를 가지고 온다 - 사용자 정의, 라이브러리
 *	                        import ~ - 여러개 사용가능
 *	 패키지가 만들어진 경우 - 연결(조립) => 접근의 문제 => 접근지정어 사용
 *
 *	※접근지정어
 *	-----------------------------------------------------------------
 *	           자신의 클래스  같은 패키지  같은 패키지+상속(다른 패키지)  모든 클래스
 *	-----------------------------------------------------------------
 *  **private      O                                         =>본인만
 *	             멤버변수
 *  -----------------------------------------------------------------                                 
 *  **default      O         O              
 *  -----------------------------------------------------------------
 *  protected      O         O              O
 *  -----------------------------------------------------------------
 *  **public       O         O              O             O(오픈) => 공개
 *               클래스 / 메소드 / 생성자 => 다른 클래스와 연결
 *  -----------------------------------------------------------------
 *   
 *  ** 클래스 - public으로 선언
 *  ** 메소드 - 다른 클래스와 통신 public
 *  ** 변수 - 다른 클래스에 사용이 안되게 만듦 private => 은닉화
 *                     사용할 수도 있다 => getter/setter
 *  ** 생성자 - 다른 클래스에서 메모리 할당 => public
 *  
 *  접근 범위의 크기
 *  private < default < protected < public
 *  
 *  1. 자바 프로그램은 모아서 관리
 *	   1) 변수
 *	   2) 연산자
 *	   3) 제어문
 *	   ========> 문법 사항
 *	   묶음 => 한개의 이름으로 제어
 *	   1) 변수 => 여러개 (변수가 여러개 있는 경우 제어가 어렵)
 *	             한개의 이름으로 제어
 *	               - 배열 - 이름 하나, 인덱스로 제어
 *	                        고정적, 연속적 메모리 설정 => 같은 데이터형만 가능
 *	               - 클래스 - 배열 단점 보완
 *	                        다른 데이터형을 모아서 관리(제한X)
 *	   2) 명령문 => 연산자/제어문 - 단점 : 중복, 다시 처음으로 돌아갈 수 없다
 *	              묶어서 사용 => 메소드
 *	   ------------------------------- = 클래스
 *	   클래스 - 변수만 묶어서 사용 : 사용자 정의 데이터형
 *	          관련된 메소드만 묶어서 사용 : 액션 클래스
 *	          변수 + 메소드 혼합
 *	          기능별로 다시 묶어서 사용 : 패키지 ex) 게시판, 회원가입, 분야별...	               
 */


/*
import lombok.Data;

//Getter Setter 라이브러리
//@Data
class Sawon{
	private int hakbun;
	private String name;
	private String sex;
	//읽기 getter, 쓰기 setter
	
	// 우클릭 source -> Generate Getters and Setters -> select All 실무사용X
	public int getHakbun() {
		return hakbun;
	}
	public void setHakbun(int hakbun) {
		this.hakbun = hakbun;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public String getSex() {
		return sex;
	}
	public void setSex(String sex) {
		this.sex = sex;
	}
}
*/
public class 접근지정어_1 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
